1. 메크로 함수
 1) #define 함수 이름(인자) 치환할 것
 예시)
  #define square(x) x* x
   => square 함수의 인자로 x를 x*x로 치환한당

 2) 메크로 함수는 함수와 비슷한 역할을 하지만 다르당
  (1) 일반 함수는 인수를 프로그램이 실행 중일 때 전달받지만, 메크로 함수는 인수를 컴파일 이전에 미리 치환한다
 
 3) 장점
  (1) 매크로 함수는 단순 치환만을 해주므로, 인수의 타입을 신경 쓰지 않습니다.
  (2) 매크로 함수를 사용하면 여러 개의 명령문을 동시에 포함할 수 있습니다.
  (3) 함수 호출에 의한 성능 저하가 일어나지 않으므로, 프로그램의 실행속도가 향상됩니다.
 
 4) 단점 
  (1) 원하는 결과를 얻는 정확한 매크로 함수의 구현은 어려우며, 따라서 디버깅 또한 매우 어렵습니다.
  (2) 매크로 함수의 크기가 증가하면 증가할수록 사용되는 괄호 또한 매우 많아져서 가독성이 떨어집니다.
 => 크기가 큰 함수보다는 간단한거에 쓰는게 좋당!

2. using 선언문
 1) 말 그대로 "~~라는 것을 사용하겠다" 라는 뜻
 예시) using namespace std;
      cout<<내용<<endl;
 2) typedef 대신 사용할수 있담
 예시) using Data = int;
      Data number1 = 0;

3. 헤더파일 선언시 구조체 중복선언 방지 방법
 1) #ifndef ~ #endif
 예시) head.h
      #ifndef HEAD_H => 만약에 HEAD_H를 define하지 않았다면
      #define HEAD_H => endif나오기 전까지 포함시켜라
      { 
        int add(int x, int y);
      }
      #endif

4. C언어 const
 1) const를 변수 앞에 붙이게 되면 값을 변경하지 못하도록하고, 해당 변수를 상수로 취급하게 됨
 예시) const int Num = 10; => Num이라는 변수를 상수로 선언함
      Num = 19; => 변수 Num은 상수이므로 상수로 변경할수 없어서 에러가 남

5. 실행중인 프로그램의 메모리 공간
 1) 데이터 : 전역변수와 정적변수가 할당되는 부분이다. 프로그램의 시작과 동시에 할당되고, 프로그램이 종료되어야 메모리가 소멸되는 영역
 2) 스택 : 프로그램이 자동으로 사용하는 임시 메모리 영역. 함수 호출시 생셩되는 지역 변수와 매개변수가 저장되는 영역이며, 함수 호출이 완료되면 사라진다.
 3) 힙 : 프로그래머가 할당, 해제하는 메모리 공간. 동적할당이 이루어지는 공간이다.

6. C언어 malloc, free 함수
 1) 미리 배열처럼 변수를 할당해두고 사용할수도 있는데 너무 많이 선언해두면 메모리 낭비가 일어날수도 이따, 그럴때 동적으로 메모리를 할당할때 사용한다
  (1) malloc
   - 필요한 크기를 동적으로 할당하여 사용한다
   - void* malloc(size_t_Size)
   - 데이터타입*malloc(sizeof(데이터타입)*할당크기);
   - 반드시! free함수를 통해 메모리를 해제해야 한당
  (2) free
   - malloc함수로 동적한 메모리를 해제할 때 사용한당
   - void malloc(void*_Block);